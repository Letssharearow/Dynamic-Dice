package com.example.dynamicdiceprototype.services

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.graphics.asImageBitmap
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.dynamicdiceprototype.R
import com.example.dynamicdiceprototype.data.Configuration
import com.example.dynamicdiceprototype.data.Dice
import com.example.dynamicdiceprototype.data.DiceState
import com.example.dynamicdiceprototype.data.Layer
import kotlinx.coroutines.launch

// extend ViewModel to survive configuration change (landscape mode)
class DiceViewModel : ViewModel() {
  val firebase = FirebaseDataStore()
  var configuration: Configuration = Configuration()
  var dicesState by mutableStateOf(getDices(7)) //
  var imageMap by
      mutableStateOf(
          mapOf<String, ImageBitmap>(
              "2130968597" to
                  firebase
                      .base64ToBitmap(
                          "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")
                      .asImageBitmap(),
              "2130968598" to
                  firebase
                      .base64ToBitmap(
                          "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")
                      .asImageBitmap(),
              "2130968623" to
                  firebase
                      .base64ToBitmap(
                          "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Efd8AQBwLzlPcrYsS9i2bTQ0NGTm5uZmr1+/vndJ/W0FbO/evVmNjY2zg8HgSMu6oydAAwBwS5xJUiAQMEpLSzPa2tqW5ufnj3A+f1tb1vf09Azz+/2ptm0bghkYAGAAOTc2K6VM27bHVldXzwsGg38UQlwU4jZnYMFgUIZCISnEFxfYAAC4D8yenp709vb2OOcDtxyw0tLSOMuy4rq7uw1nn0MiBgAYSJGPXAkGg9KyrN7w3HLARo8ePbGzs7OgrKwswfkYpxABAAPN2a0+EAiIYDDY+/FbDlhZWVn2pUuX5vX09GQJbl4GAAwg53mSzuzLOe4oYD6fb7ht2xlCCBenDwEAA83pjHMasa9bDpi8/kqmEIKHVQIABpRt272zLyF6t5YSbvcXT1a57a2kCBcA4H6wLOuGgFmWdWenEAEAuF9u5TIVAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC0RMAAAFoiYAAALREwAICWCBgAQEsEDACgJQIGANASAQMAaImAAQC05Ir2AIAYoYQQQkp55y+grr/EPRoPEPMIGHATUkohpRRKKaGUEoZx/YSFbdvO55TzOSGE5fF4Li5YsKArKSnJFkIIj8cjPB6PME2z93sdtm0LpZQIBAIiFAqJUCgkTp8+7f7ss89SpJQjhPgiaIZhCNM0RTAYFEIIYZqmsCzrhl+d13MCGv5eIKYRMAxZX/VmbxhGb7wiwyWEUBHfF4qPj28uKCjoSkxMbJk4ceKh9PT0w6FQqMfj8Qiv19sbMJfry//UQqGQCAQCIhAICL/fL5YsWZJVW1v78O")
                      .asImageBitmap(),
              "2130968625" to
                  firebase
                      .base64ToBitmap(
                          "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")
                      .asImageBitmap(),
              "2130968626" to
                  firebase
                      .base64ToBitmap(
                          "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")
                      .asImageBitmap(),
              "2130968627" to
                  firebase
                      .base64ToBitmap(
                          "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")
                      .asImageBitmap(),
          )) //

  init {
    collectFlow()
  }

  private fun diceMapToList(map: Map<String, Dice>, images: Map<String, ImageBitmap>): List<Dice> {
    return map.values.map { dice ->
      dice.copy(layers = dice.layers.map { layer -> layer.copy(data = images[layer.imageId]) })
    }
  }

  private fun collectFlow() {
    viewModelScope.launch {
      firebase.imagesFlow.collect { images ->
        imageMap = images
        val dices = configuration.configuration[configuration.lastBundle]
        if (dices != null) dicesState = diceMapToList(dices, images)
      }
    }
  }

  // Function to update a single dice
  fun lockDice(dice: Dice) {
    dicesState =
        // use Map function to trigger recomposition
        dicesState.map {
          if (it == dice) {
            // use copy function to trigger recomposition
            if (dice.state === DiceState.UNLOCKED)
                dice.copy(state = DiceState.LOCKED, rotation = 0F)
            else {
              dice.copy(state = DiceState.UNLOCKED, rotation = 0F)
            }
          } else it
        }
  }

  // Function to roll the dices
  fun rollDices() {
    dicesState =
        dicesState.map { dice ->
          if (dice.state != DiceState.LOCKED) {
            dice.copy(current = null) // set null to trigger recomposition and roll in Dice class
          } else {
            dice
          }
        }
  }

  fun getDices(n: Int = 5): List<Dice> {
    val list = mutableListOf<Dice>()
    for (i in 1..n) {
      list.add(
          Dice(
              layers =
                  listOf(
                      Layer(imageId = "${R.drawable.one_transparent}"),
                      Layer(imageId = "${R.drawable.two_transparent}"),
                      Layer(imageId = "${R.drawable.three_transparent}"),
                      Layer(imageId = "${R.drawable.four_transparent}"),
                      Layer(imageId = "${R.drawable.five_transparent}"),
                      Layer(imageId = "${R.drawable.six_transparent}"))))
    }
    return list
  }
}
